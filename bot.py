import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from datetime import datetime, timedelta
from collections import defaultdict

# üîπ –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –¢–û–ö–ï–ù
TOKEN = "8470491330:AAFKxv4plcjXZ-0JO_BLPZbYiSxZ24Vekjw"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = defaultdict(lambda: {"business": [], "family": [], "health": []})

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
categories_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üíº –ë–∏–∑–Ω–µ—Å")],
        [KeyboardButton(text="üè° –°–µ–º—å—è")],
        [KeyboardButton(text="üí™ –ó–¥–æ—Ä–æ–≤—å–µ")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ 10-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ
def rating_kb(category):
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text=str(i)) for i in range(1, 11)]],
        resize_keyboard=True,
        one_time_keyboard=True,
        input_field_placeholder=f"–í—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É –¥–ª—è {category}"
    )

# /start
@dp.message(CommandStart())
async def start_handler(message: Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, {user_name}! üåô\n"
        f"–ö–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É —è –±—É–¥—É —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è, –∫–∞–∫ —Ç—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—à—å —Å–≤–æ–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ 10-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ:\n"
        f"üíº –ë–∏–∑–Ω–µ—Å\nüè° –°–µ–º—å—è\nüí™ –ó–¥–æ—Ä–æ–≤—å–µ\n\n"
        f"–ù–∞—á–Ω—ë–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?",
        reply_markup=categories_kb
    )

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.message(lambda message: message.text in ["üíº –ë–∏–∑–Ω–µ—Å", "üè° –°–µ–º—å—è", "üí™ –ó–¥–æ—Ä–æ–≤—å–µ"])
async def choose_category(message: Message):
    category_map = {
        "üíº –ë–∏–∑–Ω–µ—Å": "business",
        "üè° –°–µ–º—å—è": "family",
        "üí™ –ó–¥–æ—Ä–æ–≤—å–µ": "health"
    }
    category = category_map[message.text]
    await message.answer(f"–û—Ü–µ–Ω–∏ {message.text} –ø–æ 10-–±–∞–ª—å–Ω–æ–π —à–∫–∞–ª–µ üëá", reply_markup=rating_kb(message.text))
    dp["category"] = category

# –û—Ü–µ–Ω–∫–∞ –ø–æ —à–∫–∞–ª–µ
@dp.message(lambda message: message.text.isdigit() and 1 <= int(message.text) <= 10)
async def rating_handler(message: Message):
    user_id = message.from_user.id
    category = dp.get("category", None)

    if not category:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é üíº/üè°/üí™", reply_markup=categories_kb)
        return

    rating = int(message.text)
    user_data[user_id][category].append(rating)

    await message.answer(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ! –¢–≤–æ—è –æ—Ü–µ–Ω–∫–∞: {rating} –∑–∞ {category}.", reply_markup=categories_kb)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É
async def weekly_check():
    while True:
        now = datetime.now()
        if now.weekday() == 4 and now.hour == 10:  # –ü—è—Ç–Ω–∏—Ü–∞ 10:00
            for user_id in user_data.keys():
                await bot.send_message(
                    user_id,
                    "–ü—è—Ç–Ω–∏—Ü–∞! –í—Ä–µ–º—è –æ—Ü–µ–Ω–∏—Ç—å —Å–≤–æ—é –Ω–µ–¥–µ–ª—é üåû\n–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup=categories_kb
                )
            await asyncio.sleep(86400)  # –∂–¥–∞—Ç—å —Å—É—Ç–∫–∏
        await asyncio.sleep(3600)  # –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ä–∞–∑ –≤ —á–∞—Å

# –û—Ç—á—ë—Ç 1 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
async def monthly_report():
    while True:
        now = datetime.now()
        if now.day == 1 and now.hour == 9:
            for user_id, data in user_data.items():
                report = []
                for k, v in data.items():
                    if v:
                        avg = sum(v) / len(v)
                        name = "–ë–∏–∑–Ω–µ—Å" if k == "business" else "–°–µ–º—å—è" if k == "family" else "–ó–¥–æ—Ä–æ–≤—å–µ"
                        report.append(f"{name}: {avg:.1f} –±–∞–ª–ª–æ–≤")
                        user_data[user_id][k] = []  # –æ—á–∏—â–∞–µ–º –æ—Ü–µ–Ω–∫–∏
                if report:
                    text = "üìä <b>–û—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü:</b>\n" + "\n".join(report)
                    await bot.send_message(user_id, text)
            await asyncio.sleep(86400)
        await asyncio.sleep(3600)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç...")
    asyncio.create_task(weekly_check())
    asyncio.create_task(monthly_report())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
