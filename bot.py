import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from datetime import datetime

TOKEN = "8470491330:AAFKxv4plcjXZ-0JO_BLPZbYiSxZ24Vekjw"

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –û—Ü–µ–Ω–æ—á–Ω–∞—è —à–∫–∞–ª–∞
def get_rating_keyboard():
    builder = InlineKeyboardBuilder()
    for i in range(1, 11):
        builder.button(text=str(i), callback_data=f"rate_{i}")
    builder.adjust(5)
    return builder.as_markup()

# –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–Ω—ë–º"
def get_start_keyboard():
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–∞—á–Ω—ë–º üöÄ", callback_data="start_rating")
    return builder.as_markup()

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
categories = [
    ("üíºüî•", "–ë–∏–∑–Ω–µ—Å"),
    ("üë®‚Äçüë©‚Äçüëß‚Äçüë¶‚ù§Ô∏è", "–°–µ–º—å—è"),
    ("üßò‚Äç‚ôÇÔ∏èüåø", "–ó–¥–æ—Ä–æ–≤—å–µ"),
    ("üß†‚ú®", "–Ø")
]

# –•—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

@dp.message(F.text)
async def start(message: Message):
    await message.answer(
        "–ê—Å—Å–∞–ª–∞–º—É –∞–ª–µ–π–∫—É–º, –ë–∏—Ä–∂–∞–Ω! üåô\n"
        "–ì–æ—Ç–æ–≤ —Å–¥–µ–ª–∞—Ç—å –Ω–µ–±–æ–ª—å—à—É—é —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É –ø–æ –≤–∞–∂–Ω—ã–º —Å—Ñ–µ—Ä–∞–º –∂–∏–∑–Ω–∏?",
        reply_markup=get_start_keyboard()
    )

@dp.callback_query(F.data == "start_rating")
async def start_rating(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_data[user_id] = {"step": 0, "answers": {}, "month": datetime.now().month}
    icon, name = categories[0]
    await callback.message.edit_text(
        f"–û—Ü–µ–Ω–∏ —Å–≤–æ–π {icon} <b>{name}</b> –æ—Ç 1 –¥–æ 10 üëá",
        reply_markup=get_rating_keyboard()
    )

@dp.callback_query(F.data.startswith("rate_"))
async def handle_rating(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in user_data:
        return await callback.answer("–ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ üôè", show_alert=True)

    step = user_data[user_id]["step"]
    rating = int(callback.data.split("_")[1])
    icon, category = categories[step]
    user_data[user_id]["answers"][category] = rating
    user_data[user_id]["step"] += 1

    if user_data[user_id]["step"] < len(categories):
        icon, next_category = categories[user_data[user_id]["step"]]
        await callback.message.edit_text(
            f"–¢–µ–ø–µ—Ä—å –æ—Ü–µ–Ω–∏ —Å–≤–æ–π {icon} <b>{next_category}</b> –æ—Ç 1 –¥–æ 10 üëá",
            reply_markup=get_rating_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–û—Ç–ª–∏—á–Ω–æ, –ë–∏—Ä–∂–∞–Ω üôå\n"
            "–¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –æ–±—â–∏–π –∏—Ç–æ–≥ üìä"
        )

# üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É
async def send_weekly_reminder():
    user_id = list(user_data.keys())[0] if user_data else None
    if user_id:
        await bot.send_message(
            user_id,
            "–ü—è—Ç–Ω–∏—Ü–∞ üåô –í—Ä–µ–º—è –ø–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –Ω–µ–¥–µ–ª–∏!\n\n"
            "–ì–æ—Ç–æ–≤ –ø—Ä–æ–π—Ç–∏ —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É? ‚ú®",
            reply_markup=get_start_keyboard()
        )

# üóìÔ∏è –û—Ç—á—ë—Ç 1 —á–∏—Å–ª–∞ –º–µ—Å—è—Ü–∞
async def send_monthly_report():
    for user_id, data in user_data.items():
        answers = data.get("answers", {})
        if not answers:
            continue

        report = "üìä <b>–¢–≤–æ–π –æ—Ç—á—ë—Ç –∑–∞ –º–µ—Å—è—Ü:</b>\n\n"
        for cat, score in answers.items():
            report += f"{cat}: {score}/10\n"

        avg = sum(answers.values()) / len(answers)
        report += f"\n–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –º–µ—Å—è—Ü–∞: <b>{avg:.1f}/10</b>\n\n"
        report += "üí° –ü—Ä–æ–¥–æ–ª–∂–∞–π –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ —Ä–∞—Å—Ç–∏, –ë–∏—Ä–∂–∞–Ω!"

        await bot.send_message(user_id, report)

# üîÅ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
def setup_scheduler():
    # –∫–∞–∂–¥—É—é –ø—è—Ç–Ω–∏—Ü—É –≤ 19:00
    scheduler.add_job(send_weekly_reminder, CronTrigger(day_of_week="fri", hour=19, minute=0))
    # 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 10:00
    scheduler.add_job(send_monthly_report, CronTrigger(day=1, hour=10, minute=0))
    scheduler.start()

async def main():
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    setup_scheduler()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
if __name__ == "__main__":
    import os
    PORT = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=PORT)
